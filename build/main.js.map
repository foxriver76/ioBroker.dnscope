{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n\nimport * as utils from '@iobroker/adapter-core';\nimport axios, { type AxiosRequestConfig } from 'axios';\nimport { promises as dns } from 'node:dns';\n\nclass Dnscope extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'dnscope',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        if (this.config.ipv4) {\n            const currentIP: string | null = await this.checkipv4();\n            const lastIP: string | null = await this.resolveDNSv4(this.config.domain);\n            if ((this.config.onlyChanges && currentIP !== lastIP) || !this.config.onlyChanges) {\n                await this.updateDNSv4(currentIP);\n            } else {\n                this.log.debug('no changes for IPv4');\n            }\n            if (!this.config.ipv6) {\n                await this.delay(10000);\n                this.terminate();\n            }\n        }\n\n        if (this.config.ipv6) {\n            const currentIP: string | null = await this.checkipv6();\n            const lastIP: string | null = await this.resolveDNSv6(this.config.domain);\n            if ((this.config.onlyChanges && currentIP !== lastIP) || !this.config.onlyChanges) {\n                await this.updateDNSv6(currentIP);\n            } else {\n                this.log.debug('no changes for IPv6');\n            }\n            await this.delay(10000);\n            this.terminate();\n        }\n    }\n\n    private onUnload(callback: () => void): void {\n        try {\n            this.log.debug('cleaned everything up...');\n            callback();\n        } catch (e) {\n            this.log.error(`Unload Error: ${e}`);\n            callback();\n        }\n    }\n\n    private async checkipv4(): Promise<string | null> {\n        return new Promise(resolve => {\n            void (async () => {\n                const url = 'https://ipinfo.io/json';\n                try {\n                    const dataRequest = await axios({\n                        method: 'get',\n                        url: url,\n                        timeout: 10000,\n                        responseType: 'json',\n                    });\n\n                    const data = dataRequest.data;\n\n                    await this.setObjectNotExistsAsync('data.currentIPv4', {\n                        type: 'state',\n                        common: {\n                            name: 'current IPv4',\n                            type: 'string',\n                            role: 'info.ip',\n                            read: true,\n                            write: false,\n                        },\n                        native: {},\n                    });\n                    const state = await this.getStateAsync('data.currentIPv4');\n\n                    if (data?.ip !== state?.val) {\n                        await this.setStateChangedAsync('data.currentIPv4', data?.ip ? data.ip : 'not available', true);\n                    }\n                    resolve(data?.ip);\n\n                    this.log.debug(JSON.stringify(dataRequest.data));\n                } catch (error) {\n                    this.log.warn(`ipinfo.io is not available: ${error.toString()}`);\n                    resolve(null);\n                }\n            })();\n        });\n    }\n\n    private async checkipv6(): Promise<string | null> {\n        return new Promise(resolve => {\n            void (async () => {\n                const url = 'https://v6.ipinfo.io/json';\n                try {\n                    const dataRequest = await axios({\n                        method: 'get',\n                        url: url,\n                        timeout: 10000,\n                        responseType: 'json',\n                    });\n\n                    const data = dataRequest.data;\n\n                    await this.setObjectNotExistsAsync('data.currentIPv6', {\n                        type: 'state',\n                        common: {\n                            name: 'current IPv6',\n                            type: 'string',\n                            role: 'info.ip',\n                            read: true,\n                            write: false,\n                        },\n                        native: {},\n                    });\n                    const state = await this.getStateAsync('data.currentIPv6');\n\n                    if (data?.ip !== state?.val) {\n                        await this.setStateChangedAsync('data.currentIPv6', data?.ip ? data.ip : 'not available', true);\n                    }\n                    resolve(data?.ip);\n\n                    this.log.debug(JSON.stringify(dataRequest.data));\n                } catch (error) {\n                    this.log.warn(`ipinfo.io is not available: ${error.toString()}`);\n                    resolve(null);\n                }\n            })();\n        });\n    }\n\n    private async resolveDNSv4(domain: string): Promise<string | null> {\n        return new Promise(resolve => {\n            void (async () => {\n                try {\n                    const addresses: string | null = (await dns.resolve4(domain)).toString();\n                    this.log.debug(`IPv4 for ${domain}: ${addresses}`);\n                    resolve(addresses);\n                } catch (error) {\n                    this.log.warn(`Error during DNS resolution: ${error.toString()}`);\n                    resolve(null);\n                }\n            })();\n        });\n    }\n\n    private async resolveDNSv6(domain: string): Promise<string | null> {\n        return new Promise(resolve => {\n            void (async () => {\n                try {\n                    const addresses: string | null = (await dns.resolve6(domain)).toString();\n                    this.log.debug(`IPv6 for ${domain}: ${addresses}`);\n                    resolve(addresses);\n                } catch (error) {\n                    this.log.warn(`Error during DNS resolution: ${error.toString()}`);\n                    resolve(null);\n                }\n            })();\n        });\n    }\n\n    private async updateDNSv4(currentIPv4: string | null): Promise<string | null> {\n        return new Promise(resolve => {\n            void (async () => {\n                let url = '' as string;\n                let username = null as null | string;\n                let password = null as null | string;\n                const domain: string = this.config.domain;\n\n                switch (this.config.dyndnsServive) {\n                    case 'duckdns':\n                        url = `https://www.duckdns.org/update?domains=${domain.split('.')[0]}&token=${this.config.duckdnsToken}&ip=${currentIPv4}`;\n                        break;\n                    case 'ipv64':\n                        url = `https://ipv64.net/update.php?key=${this.config.ipv64Token}&domain=${domain}&ip=${currentIPv4}`;\n                        break;\n                    case 'noip':\n                        url = `https://dynupdate.no-ip.com/nic/update?hostname=${domain}&myip=${currentIPv4}`;\n                        password = this.config.noipPassword;\n                        username = this.config.noipUser;\n                        break;\n                    case 'custom':\n                        url = this.config.customURL;\n                        break;\n                    case 'dynv6':\n                        url = `https://ipv4.dynv6.com/api/update?ipv4=${currentIPv4}&token=${this.config.dynv6Token}`;\n                        break;\n                }\n\n                try {\n                    const config: AxiosRequestConfig = {\n                        method: 'get',\n                        url: url,\n                        timeout: 10000,\n                        auth: username && password ? { username, password } : undefined,\n                    };\n\n                    const response = await axios(config);\n                    this.log.debug(`DNS Update State for IPv4: ${JSON.stringify(response.data)}`);\n                    resolve('OK');\n                } catch (error) {\n                    this.log.error(`Error in the request for IPv4: ${error.message}`);\n                    resolve('not OK');\n                }\n            })();\n        });\n    }\n\n    private async updateDNSv6(currentIPv6: string | null): Promise<string | null> {\n        return new Promise(resolve => {\n            void (async () => {\n                let url = '';\n                let username = null;\n                let password = null;\n                const domain = this.config.domain;\n\n                switch (this.config.dyndnsServive) {\n                    case 'duckdns':\n                        url = `https://www.duckdns.org/update?domains=${domain.split('.')[0]}&token=${this.config.duckdnsToken}&ipv6=${currentIPv6}`;\n                        break;\n                    case 'ipv64':\n                        url = `https://ipv64.net/nic/update?key=${this.config.ipv64Token}&domain=${domain}&ip6=${currentIPv6}`;\n                        break;\n                    case 'noip':\n                        url = `https://dynupdate.no-ip.com/nic/update?hostname=${domain}&myip=${currentIPv6}`;\n                        password = this.config.noipPassword;\n                        username = this.config.noipUser;\n                        break;\n                    case 'custom':\n                        url = this.config.customURL;\n                        break;\n                    case 'dynv6':\n                        url = `https://ipv6.dynv6.com/api/update?ipv6=${currentIPv6}&token=${this.config.dynv6Token}`;\n                        break;\n                }\n\n                try {\n                    const config: AxiosRequestConfig = {\n                        method: 'get',\n                        url: url,\n                        timeout: 10000,\n                        auth: username && password ? { username, password } : undefined,\n                    };\n\n                    const response = await axios(config);\n                    this.log.debug(`DNS Update State for IPv6: ${JSON.stringify(response.data)}`);\n                    resolve('OK');\n                } catch (error) {\n                    this.log.error(`Error in the request for IPv6: ${error.message}`);\n                    resolve('not OK');\n                }\n            })();\n        });\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Dnscope(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Dnscope())();\n}\n"],
  "mappings": "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",
  "names": ["axios", "dns"]
}
