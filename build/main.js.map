{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n\nimport * as utils from '@iobroker/adapter-core';\nimport axios, { type AxiosRequestConfig } from 'axios';\nimport { promises as dns } from 'node:dns';\n\n\nclass Dnscope extends utils.Adapter {\n\ttimerSleep: ioBroker.Timeout | undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'dnscope',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t\tthis.timerSleep = null;\n\t}\n\n\tprivate async onReady(): Promise<void> {\n\t\tif (this.config.ipv4) {\n\t\t\tconst currentIP: string | null = await this.checkipv4();\n\t\t\tconst lastIP: string | null = await this.resolveDNSv4(this.config.domain);\n\t\t\tif (this.config.onlyChanges && currentIP !== lastIP || !this.config.onlyChanges) {\n\t\t\t\tawait this.updateDNSv4(currentIP);\n\t\t\t}\n\t\t\tif (!this.config.ipv6) {\n\t\t\t\tawait this.sleep(10000);\n\t\t\t\tthis.terminate();\n\t\t\t}\n\t\t}\n\n\t\tif (this.config.ipv6) {\n\t\t\tconst currentIP: string | null = await this.checkipv6();\n\t\t\tconst lastIP: string | null = await this.resolveDNSv6(this.config.domain);\n\t\t\tif (this.config.onlyChanges && currentIP !== lastIP || !this.config.onlyChanges) {\n\t\t\t\tawait this.updateDNSv6(currentIP);\n\t\t\t}\n\t\t\tawait this.sleep(10000);\n\t\t\tthis.terminate();\n\t\t}\n\n\t}\n\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tthis.clearTimeout(this.timerSleep);\n\t\t\tthis.log.debug('cleaned everything up...');\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate async checkipv4(): Promise<string | null> {\n\t\treturn new Promise(async (resolve) => {\n\t\t\tconst url = 'https://ipinfo.io/json';\n\t\t\ttry {\n\t\t\t\tconst dataRequest = await axios({\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tresponseType: 'json'\n\t\t\t\t});\n\n\t\t\t\tconst data = dataRequest.data;\n\n\t\t\t\tawait this.setObjectNotExistsAsync('data.currentIPv4', {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: 'current IPv4',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\trole: 'indicator',\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tconst state = await this.getStateAsync('data.currentIPv4');\n\n\t\t\t\tif (data?.ip !== state?.val) {\n\t\t\t\t\tawait this.setStateChangedAsync('data.currentIPv4', data?.ip ? data.ip : 'not available', true);\n\t\t\t\t}\n\t\t\t\tresolve(data?.ip);\n\n\t\t\t\tthis.log.debug(JSON.stringify(dataRequest.data));\n\t\t\t} catch (error) {\n\t\t\t\tthis.log.warn(`ipinfo.io is not available: ${error.toString()}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async checkipv6(): Promise<string | null> {\n\t\treturn new Promise(async (resolve) => {\n\t\t\tconst url = 'https://v6.ipinfo.io/json';\n\t\t\ttry {\n\t\t\t\tconst dataRequest = await axios({\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tresponseType: 'json'\n\t\t\t\t});\n\n\t\t\t\tconst data = dataRequest.data;\n\n\t\t\t\tawait this.setObjectNotExistsAsync('data.currentIPv6', {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: 'current IPv6',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\trole: 'indicator',\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tconst state = await this.getStateAsync('data.currentIPv6');\n\n\t\t\t\tif (data?.ip !== state?.val) {\n\t\t\t\t\tawait this.setStateChangedAsync('data.currentIPv6', data?.ip ? data.ip : 'not available', true);\n\t\t\t\t}\n\t\t\t\tresolve(data?.ip);\n\n\t\t\t\tthis.log.debug(JSON.stringify(dataRequest.data));\n\t\t\t} catch (error) {\n\t\t\t\tthis.log.warn(`ipinfo.io is not available: ${error.toString()}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async resolveDNSv4(domain: string): Promise<string | null> {\n\t\treturn new Promise(async (resolve) => {\n\t\t\ttry {\n\t\t\t\tconst addresses: string | null = (await dns.resolve4(domain)).toString();\n\t\t\t\tthis.log.debug(`IPv4 for ${domain}: ${addresses}`);\n\t\t\t\tresolve(addresses);\n\t\t\t} catch (error) {\n\t\t\t\tthis.log.warn(`Error during DNS resolution: ${error.toString()}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async resolveDNSv6(domain: string): Promise<string | null> {\n\t\treturn new Promise(async (resolve) => {\n\t\t\ttry {\n\t\t\t\tconst addresses: string | null = (await dns.resolve6(domain)).toString();\n\t\t\t\tthis.log.debug(`IPv6 for ${domain}: ${addresses}`);\n\t\t\t\tresolve(addresses);\n\t\t\t} catch (error) {\n\t\t\t\tthis.log.warn(`Error during DNS resolution: ${error.toString()}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateDNSv4(currentIPv4: string | null): Promise<string | null> {\n\t\treturn new Promise(async (resolve) => {\n\t\t\tlet url = '' as string;\n\t\t\tlet username = null as null | string;\n\t\t\tlet password = null as null | string;\n\t\t\tconst domain: string = this.config.domain;\n\n\t\t\tswitch (this.config.dyndnsServive) {\n\t\t\t\tcase 'duckdns':\n\t\t\t\t\turl = `https://www.duckdns.org/update?domains=${domain.split('.')[0]}&token=${this.config.duckdnsToken}&ip=${currentIPv4}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ipv64':\n\t\t\t\t\turl = `https://ipv64.net/update.php?key=${this.config.ipv64Token}&domain=${domain}&ip=${currentIPv4}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'noip':\n\t\t\t\t\turl = `https://dynupdate.no-ip.com/nic/update?hostname=${domain}&myip=${currentIPv4}`;\n\t\t\t\t\tpassword = this.config.noipPassword;\n\t\t\t\t\tusername = this.config.noipUser;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'custom':\n\t\t\t\t\turl = this.config.customURL;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dynv6':\n\t\t\t\t\turl = `https://ipv4.dynv6.com/api/update?ipv4=${currentIPv4}&token=${this.config.dynv6Token}`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst config: AxiosRequestConfig = {\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tauth: username && password ? { username, password } : undefined\n\t\t\t\t};\n\n\t\t\t\tconst response = await axios(config);\n\t\t\t\tthis.log.debug(`DNS Update State: ${JSON.stringify(response.data)}`);\n\t\t\t\tresolve('OK');\n\t\t\t} catch (error) {\n\t\t\t\tthis.log.error(`Error in the request for IPv4: ${error.message}`);\n\t\t\t\tresolve('not OK');\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateDNSv6(currentIPv6: string | null): Promise<string | null> {\n\t\treturn new Promise(async (resolve) => {\n\t\t\tlet url = '';\n\t\t\tlet username = null;\n\t\t\tlet password = null;\n\t\t\tconst domain = this.config.domain;\n\n\t\t\tswitch (this.config.dyndnsServive) {\n\t\t\t\tcase 'duckdns':\n\t\t\t\t\turl = `https://www.duckdns.org/update?domains=${domain.split('.')[0]}&token=${this.config.duckdnsToken}&ipv6=${currentIPv6}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ipv64':\n\t\t\t\t\turl = `https://ipv64.net/nic/update?key=${this.config.ipv64Token}&domain=${domain}&ip6=${currentIPv6}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'noip':\n\t\t\t\t\turl = `https://dynupdate.no-ip.com/nic/update?hostname=${domain}&myip=${currentIPv6}`;\n\t\t\t\t\tpassword = this.config.noipPassword;\n\t\t\t\t\tusername = this.config.noipUser;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'custom':\n\t\t\t\t\turl = this.config.customURL;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dynv6':\n\t\t\t\t\turl = `https://ipv6.dynv6.com/api/update?ipv6=${currentIPv6}&token=${this.config.dynv6Token}`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst config: AxiosRequestConfig = {\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tauth: username && password ? { username, password } : undefined\n\t\t\t\t};\n\n\t\t\t\tconst response = await axios(config);\n\t\t\t\tthis.log.debug(`DNS Update State: ${JSON.stringify(response.data)}`);\n\t\t\t\tresolve('OK');\n\t\t\t} catch (error) {\n\t\t\t\tthis.log.error(`Error in the request for IPv6: ${error.message}`);\n\t\t\t\tresolve('not OK');\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async sleep(ms: number): Promise<void> {\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tthis.timerSleep = this.setTimeout(() => resolve(), ms);\n\t\t});\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Dnscope(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Dnscope())();\n}"],
  "mappings": "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",
  "names": ["axios", "dns"]
}
