{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n\nimport * as utils from '@iobroker/adapter-core';\nimport axios, { type AxiosRequestConfig } from 'axios';\nimport { promises as dns } from 'node:dns';\n\n\nclass Dnscope extends utils.Adapter {\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'dnscope',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\tprivate async onReady(): Promise<void> {\n\t\tif (this.config.ipv4) {\n\t\t\tconst currentIP = await this.checkipv4();\n\t\t\tconst lastIP = await this.resolveDNSv4(this.config.domain);\n\t\t\tif (currentIP !== lastIP) {\n\t\t\t\tawait this.updateDNSv4(currentIP);\n\t\t\t}\n\t\t}\n\n\t\tif (this.config.ipv6) {\n\t\t\tconst currentIP: string | null = await this.checkipv6();\n\t\t\tconst lastIP = await this.resolveDNSv6(this.config.domain);\n\t\t\tif (currentIP !== lastIP) {\n\t\t\t\tawait this.updateDNSv6(currentIP);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkipv4(): Promise<string | null> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = 'https://ipinfo.io/json';\n\t\t\ttry {\n\t\t\t\tconst dataRequest = await axios({\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tresponseType: 'json'\n\t\t\t\t});\n\n\t\t\t\tconst data = dataRequest.data;\n\n\t\t\t\tawait this.setObjectNotExistsAsync('data.currentIPv4', {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: 'current IPv4',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\trole: 'indicator',\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tconst state = await this.getStateAsync('data.currentIPv4');\n\n\t\t\t\tif (data?.ip !== state?.val) {\n\t\t\t\t\tawait this.setStateChangedAsync('data.currentIPv4', data?.ip ? data.ip : 'not available', true);\n\t\t\t\t}\n\t\t\t\tresolve(data?.ip);\n\n\t\t\t\tthis.log.info(JSON.stringify(dataRequest.data));\n\t\t\t} catch (err: any) {\n\t\t\t\tthis.log.warn(`ipinfo.io is not available: ${err}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async checkipv6(): Promise<string | null> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = 'https://v6.ipinfo.io/json';\n\t\t\ttry {\n\t\t\t\tconst dataRequest = await axios({\n\t\t\t\t\tmethod: 'get',\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tresponseType: 'json'\n\t\t\t\t});\n\n\t\t\t\tconst data = dataRequest.data;\n\n\t\t\t\tawait this.setObjectNotExistsAsync('data.currentIPv6', {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: 'current IPv6',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\trole: 'indicator',\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tconst state = await this.getStateAsync('data.currentIPv6');\n\n\t\t\t\tif (data?.ip !== state?.val) {\n\t\t\t\t\tawait this.setStateChangedAsync('data.currentIPv6', data?.ip ? data.ip : 'not available', true);\n\t\t\t\t}\n\t\t\t\tresolve(data?.ip);\n\n\t\t\t\tthis.log.info(JSON.stringify(dataRequest.data));\n\t\t\t} catch (err: any ) {\n\t\t\t\tthis.log.warn(`ipinfo.io is not available: ${err}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async resolveDNSv4(domain: string): Promise<string | null> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst addresses: string | null = (await dns.resolve4(domain)).toString();\n\t\t\t\tthis.log.info(`IPv4 for ${domain}: ${addresses}`);\n\t\t\t\tresolve(addresses);\n\t\t\t} catch (error: any) {\n\t\t\t\tthis.log.warn(`Fehler bei der DNS-Aufl\u00F6sung: ${error}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async resolveDNSv6(domain: string): Promise<string | null> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst addresses: string | null = (await dns.resolve6(domain)).toString();\n\t\t\t\tthis.log.info(`IPv6 for ${domain}: ${addresses}`);\n\t\t\t\tresolve(addresses);\n\t\t\t} catch (error: any) {\n\t\t\t\tthis.log.warn(`Fehler bei der DNS-Aufl\u00F6sung: ${error}`);\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateDNSv4(currentIPv4: string | null): Promise<string | null> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\tlet url = '' as string;\n\t\tlet username = null as null | string;\n\t\tlet password = null as null | string;\n\t\tconst domain: string = this.config.domain;\n\n\t\tswitch (this.config.dyndnsServive) {\n\t\t\tcase 'duckdns':\n\t\t\t\turl = `https://www.duckdns.org/update?domains=${domain.split('.')[0]}&token=${this.config.duckdnsToken}&ip=${currentIPv4}`;\n\t\t\t\tbreak;\n\t\t\tcase 'ipv64':\n\t\t\t\turl = `https://ipv64.net/update.php?key=${this.config.ipv64Token}&domain=${domain}&ip=${currentIPv4}`;\n\t\t\t\tbreak;\n\t\t\tcase 'noip':\n\t\t\t\turl = `https://dynupdate.no-ip.com/nic/update?hostname=${domain}&myip=${currentIPv4}`;\n\t\t\t\tpassword = this.config.noipPassword;\n\t\t\t\tusername = this.config.noipUser;\n\t\t\t\tbreak;\n\t\t\tcase 'custom':\n\t\t\t\turl = this.config.customURL;\n\t\t\t\tbreak;\n\t\t}\n\n\t\ttry {\n\t\t\tconst config: AxiosRequestConfig = {\n\t\t\t\tmethod: 'get',\n\t\t\t\turl: url,\n\t\t\t\tauth: username && password ? { username, password } : undefined\n\t\t\t};\n\n\t\t\tconst response = await axios(config);\n\n\t\t\tif (response.data.includes('OK')) {\n\t\t\t\tthis.log.info(`DNS erfolgreich aktualisiert f\u00FCr ${this.config.domain}`);\n\t\t\t} else {\n\t\t\t\tthis.log.error(`Fehler bei der Aktualisierung: ${response.data}`);\n\t\t\t}\n\t\t\tresolve('OK');\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`Fehler bei der Anfrage: ${error.message}`);\n\t\t\tresolve('not OK');\n\t\t}\n\t});\n\t}\n\n\tprivate async updateDNSv6(currentIPv6: string | null): Promise<string | null> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\tlet url = '';\n\t\tlet username = null;\n\t\tlet password = null;\n\t\tconst domain = this.config.domain;\n\n\t\tswitch (this.config.dyndnsServive) {\n\t\t\tcase 'duckdns':\n\t\t\t\turl = `https://www.duckdns.org/update?domains=${domain.split('.')[0]}&token=${this.config.duckdnsToken}&ipv6=${currentIPv6}`;\n\t\t\t\tbreak;\n\t\t\tcase 'ipv64':\n\t\t\t\turl = `https://ipv64.net/nic/update?key=${this.config.ipv64Token}&domain=${domain}&ip6=${currentIPv6}`;\n\t\t\t\tbreak;\n\t\t\tcase 'noip':\n\t\t\t\turl = `https://dynupdate.no-ip.com/nic/update?hostname=${domain}&myip=${currentIPv6}`;\n\t\t\t\tpassword = this.config.noipPassword;\n\t\t\t\tusername = this.config.noipUser;\n\t\t\t\tbreak;\n\t\t}\n\n\t\ttry {\n\t\t\tconst config: AxiosRequestConfig = {\n\t\t\t\tmethod: 'get',\n\t\t\t\turl: url,\n\t\t\t\tauth: username && password ? { username, password } : undefined\n\t\t\t};\n\n\t\t\tconst response = await axios(config);\n\t\t\tif (response.data.includes('OK')) {\n\t\t\t\tthis.log.info(`DNS erfolgreich aktualisiert f\u00FCr ${this.config.domain}`);\n\t\t\t} else {\n\t\t\t\tthis.log.error(`Fehler bei der Aktualisierung: ${response.data}`);\n\t\t\t}\n\t\t\tresolve('OK');\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`Fehler bei der Anfrage: ${error.message}`);\n\t\t\tresolve('not OK');\n\t\t}\n\t});\n\t}\n\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires 'common.messagebox' property to be set to true in io-package.json\n\t//  * @param {ioBroker.Message} obj\n\t//  */\n\t// onMessage(obj) {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Dnscope(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Dnscope())();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAEA,YAAuB;AACvB,mBAA+C;AAC/C,sBAAgC;AAGhC,MAAM,gBAAgB,MAAM,QAAQ;AAAA,EAE5B,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA,EAEA,MAAc,UAAyB;AACtC,QAAI,KAAK,OAAO,MAAM;AACrB,YAAM,YAAY,MAAM,KAAK,UAAU;AACvC,YAAM,SAAS,MAAM,KAAK,aAAa,KAAK,OAAO,MAAM;AACzD,UAAI,cAAc,QAAQ;AACzB,cAAM,KAAK,YAAY,SAAS;AAAA,MACjC;AAAA,IACD;AAEA,QAAI,KAAK,OAAO,MAAM;AACrB,YAAM,YAA2B,MAAM,KAAK,UAAU;AACtD,YAAM,SAAS,MAAM,KAAK,aAAa,KAAK,OAAO,MAAM;AACzD,UAAI,cAAc,QAAQ;AACzB,cAAM,KAAK,YAAY,SAAS;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,YAAoC;AACjD,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC7C,YAAM,MAAM;AACZ,UAAI;AACH,cAAM,cAAc,UAAM,aAAAA,SAAM;AAAA,UAC/B,QAAQ;AAAA,UACR;AAAA,UACA,SAAS;AAAA,UACT,cAAc;AAAA,QACf,CAAC;AAED,cAAM,OAAO,YAAY;AAEzB,cAAM,KAAK,wBAAwB,oBAAoB;AAAA,UACtD,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA,QAAQ,CAAC;AAAA,QACV,CAAC;AACD,cAAM,QAAQ,MAAM,KAAK,cAAc,kBAAkB;AAEzD,aAAI,6BAAM,SAAO,+BAAO,MAAK;AAC5B,gBAAM,KAAK,qBAAqB,qBAAoB,6BAAM,MAAK,KAAK,KAAK,iBAAiB,IAAI;AAAA,QAC/F;AACA,gBAAQ,6BAAM,EAAE;AAEhB,aAAK,IAAI,KAAK,KAAK,UAAU,YAAY,IAAI,CAAC;AAAA,MAC/C,SAAS,KAAU;AAClB,aAAK,IAAI,KAAK,+BAA+B,GAAG,EAAE;AAClD,gBAAQ,IAAI;AAAA,MACb;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,YAAoC;AACjD,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC7C,YAAM,MAAM;AACZ,UAAI;AACH,cAAM,cAAc,UAAM,aAAAA,SAAM;AAAA,UAC/B,QAAQ;AAAA,UACR;AAAA,UACA,SAAS;AAAA,UACT,cAAc;AAAA,QACf,CAAC;AAED,cAAM,OAAO,YAAY;AAEzB,cAAM,KAAK,wBAAwB,oBAAoB;AAAA,UACtD,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA,QAAQ,CAAC;AAAA,QACV,CAAC;AACD,cAAM,QAAQ,MAAM,KAAK,cAAc,kBAAkB;AAEzD,aAAI,6BAAM,SAAO,+BAAO,MAAK;AAC5B,gBAAM,KAAK,qBAAqB,qBAAoB,6BAAM,MAAK,KAAK,KAAK,iBAAiB,IAAI;AAAA,QAC/F;AACA,gBAAQ,6BAAM,EAAE;AAEhB,aAAK,IAAI,KAAK,KAAK,UAAU,YAAY,IAAI,CAAC;AAAA,MAC/C,SAAS,KAAW;AACnB,aAAK,IAAI,KAAK,+BAA+B,GAAG,EAAE;AAClD,gBAAQ,IAAI;AAAA,MACb;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,aAAa,QAAwC;AAClE,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC7C,UAAI;AACH,cAAM,aAA4B,MAAM,gBAAAC,SAAI,SAAS,MAAM,GAAG,SAAS;AACvE,aAAK,IAAI,KAAK,YAAY,MAAM,KAAK,SAAS,EAAE;AAChD,gBAAQ,SAAS;AAAA,MAClB,SAAS,OAAY;AACpB,aAAK,IAAI,KAAK,oCAAiC,KAAK,EAAE;AACtD,gBAAQ,IAAI;AAAA,MACb;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,aAAa,QAAwC;AAClE,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC7C,UAAI;AACH,cAAM,aAA4B,MAAM,gBAAAA,SAAI,SAAS,MAAM,GAAG,SAAS;AACvE,aAAK,IAAI,KAAK,YAAY,MAAM,KAAK,SAAS,EAAE;AAChD,gBAAQ,SAAS;AAAA,MAClB,SAAS,OAAY;AACpB,aAAK,IAAI,KAAK,oCAAiC,KAAK,EAAE;AACtD,gBAAQ,IAAI;AAAA,MACb;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,YAAY,aAAoD;AAC7E,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC9C,UAAI,MAAM;AACV,UAAI,WAAW;AACf,UAAI,WAAW;AACf,YAAM,SAAiB,KAAK,OAAO;AAEnC,cAAQ,KAAK,OAAO,eAAe;AAAA,QAClC,KAAK;AACJ,gBAAM,0CAA0C,OAAO,MAAM,GAAG,EAAE,CAAC,CAAC,UAAU,KAAK,OAAO,YAAY,OAAO,WAAW;AACxH;AAAA,QACD,KAAK;AACJ,gBAAM,oCAAoC,KAAK,OAAO,UAAU,WAAW,MAAM,OAAO,WAAW;AACnG;AAAA,QACD,KAAK;AACJ,gBAAM,mDAAmD,MAAM,SAAS,WAAW;AACnF,qBAAW,KAAK,OAAO;AACvB,qBAAW,KAAK,OAAO;AACvB;AAAA,QACD,KAAK;AACJ,gBAAM,KAAK,OAAO;AAClB;AAAA,MACF;AAEA,UAAI;AACH,cAAM,SAA6B;AAAA,UAClC,QAAQ;AAAA,UACR;AAAA,UACA,MAAM,YAAY,WAAW,EAAE,UAAU,SAAS,IAAI;AAAA,QACvD;AAEA,cAAM,WAAW,UAAM,aAAAD,SAAM,MAAM;AAEnC,YAAI,SAAS,KAAK,SAAS,IAAI,GAAG;AACjC,eAAK,IAAI,KAAK,uCAAoC,KAAK,OAAO,MAAM,EAAE;AAAA,QACvE,OAAO;AACN,eAAK,IAAI,MAAM,kCAAkC,SAAS,IAAI,EAAE;AAAA,QACjE;AACA,gBAAQ,IAAI;AAAA,MACb,SAAS,OAAY;AACpB,aAAK,IAAI,MAAM,2BAA2B,MAAM,OAAO,EAAE;AACzD,gBAAQ,QAAQ;AAAA,MACjB;AAAA,IACD,CAAC;AAAA,EACD;AAAA,EAEA,MAAc,YAAY,aAAoD;AAC7E,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC9C,UAAI,MAAM;AACV,UAAI,WAAW;AACf,UAAI,WAAW;AACf,YAAM,SAAS,KAAK,OAAO;AAE3B,cAAQ,KAAK,OAAO,eAAe;AAAA,QAClC,KAAK;AACJ,gBAAM,0CAA0C,OAAO,MAAM,GAAG,EAAE,CAAC,CAAC,UAAU,KAAK,OAAO,YAAY,SAAS,WAAW;AAC1H;AAAA,QACD,KAAK;AACJ,gBAAM,oCAAoC,KAAK,OAAO,UAAU,WAAW,MAAM,QAAQ,WAAW;AACpG;AAAA,QACD,KAAK;AACJ,gBAAM,mDAAmD,MAAM,SAAS,WAAW;AACnF,qBAAW,KAAK,OAAO;AACvB,qBAAW,KAAK,OAAO;AACvB;AAAA,MACF;AAEA,UAAI;AACH,cAAM,SAA6B;AAAA,UAClC,QAAQ;AAAA,UACR;AAAA,UACA,MAAM,YAAY,WAAW,EAAE,UAAU,SAAS,IAAI;AAAA,QACvD;AAEA,cAAM,WAAW,UAAM,aAAAA,SAAM,MAAM;AACnC,YAAI,SAAS,KAAK,SAAS,IAAI,GAAG;AACjC,eAAK,IAAI,KAAK,uCAAoC,KAAK,OAAO,MAAM,EAAE;AAAA,QACvE,OAAO;AACN,eAAK,IAAI,MAAM,kCAAkC,SAAS,IAAI,EAAE;AAAA,QACjE;AACA,gBAAQ,IAAI;AAAA,MACb,SAAS,OAAY;AACpB,aAAK,IAAI,MAAM,2BAA2B,MAAM,OAAO,EAAE;AACzD,gBAAQ,QAAQ;AAAA,MACjB;AAAA,IACD,CAAC;AAAA,EACD;AAAA,EAEQ,SAAS,UAA4B;AAC5C,QAAI;AAEH,eAAS;AAAA,IACV,SAAS,GAAG;AACX,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAEQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AAEV,WAAK,IAAI,KAAK,SAAS,EAAE,aAAa,MAAM,GAAG,WAAW,MAAM,GAAG,GAAG;AAAA,IACvE,OAAO;AAEN,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACpC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,QAAQ,OAAO;AAC7F,OAAO;AAEN,GAAC,MAAM,IAAI,QAAQ,GAAG;AACvB;",
  "names": ["axios", "dns"]
}
